# turn into four overlays
# (1) data
data.w
# (2) common
dataCommonOverlay <- as.data.frame(matrix(dataCommon, nrow = nrow(data.w),
ncol = ncol(data.w)))
names(dataCommonOverlay) <- names(data.eff)
# (3) condition
dataOverlay <- as.data.frame(matrix(data.eff, nrow = nrow(data.w),
ncol = ncol(data.w),
byrow = TRUE))
names(dataOverlay) <- names(data.eff)
# (4) residuals
names(dataResid) <- names(data.eff)
return(list("data"=tibble::tibble(data.w),
"common"=tibble::tibble(dataCommonOverlay),
"condition"=tibble::tibble(dataOverlay),
"residuals"=tibble::tibble(dataResid)))
}
#' @export
ANOVA_overlay.formula <- function(x, data, common = mean){
dvFormula <- as.character(x[[2]])
ivFormula <- as.character(x[[3]])
ANOVA_overlay.default(ivFormula, dvFormula, data, common)
}
ANOVA_overlay(rating~cond, moodIndx)
ANOVA_overlay("cond", "rating", moodIndx)
ToothGrowth
ANOVA_overlay("supp", "len", ToothGrowth)
ANOVA_overlay("len", "supp", ToothGrowth)
ANOVA_overlay("dose", "len", ToothGrowth)
ANOVA_overlay("supp", "len", ToothGrowth, common = median)
roxygen2::roxygenise()
rm(list = c("ANOVA_overlay"))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
remotes::install_github("mjmeyer111/DARE")
library(DARE)
ANOVA_overlay(rating~cond, moodIndx)
moodOverlays <- ANOVA_overlay(rating~cond, moodIndx)
common <- moodOverlays$common %>% print()
condition <- moodOverlays$condition %>% print()
residuals <- moodOverlays$residuals %>% print()
ANOVA_overlay("supp", "len", ToothGrowth)
ANOVA_overlay(len~supp, ToothGrowth)
library(DARE)
library(tidyverse)
library(baguette)
library(broom)
library(dials)
library(magrittr)
library(modeldata)
library(modelr)
library(poissonreg)
library(RColorBrewer)
library(recipes)
library(rules)
library(stacks)
library(textrecipes)
lag <- dplyr::lag
library(kableExtra)
group_rows <- dplyr::group_rows
library(xtable)
library(vroom)
library(viridisLite)
library(viridis)
myCol <- viridis(4)
# shape
library(broom)
# residuals
library(janitor)
chisq.test <- janitor::chisq.test
fisher.test <- janitor::fisher.test
library(sysfonts)
library(showtext)
library(readxl)
library(car)
recode <- dplyr::recode
some <- purrr::some
library(robustbase)
library(scales)
library(ACSWR)
# regression
library(colorspace)
## required by gamlss.add
library(gamlss.dist)
library(MASS)
select <- dplyr::select
filter <- dplyr::filter
library(gamlss)
library(splines)
library(gamlss.data)
library(nlme)
collapse <- dplyr::collapse
library(parallel)
library(mgcv)
library(nlme)
library(gamlss.add)
library(ggpubr)
library(ggtext)
predict.lm <- stats::predict.lm
# effects
library(twoway)
library(formula.tools)
# experiments
library(mltools)
# probability
intersect <- dplyr::intersect
setdiff <- dplyr::setdiff
union <- dplyr::union
## required for prob
library(combinat)
library(fBasics)
densityPlot <- car::densityPlot
library(timeDate)
align <- xtable::align
library(timeSeries)
# rv
library(formattable)
# discrete
library(cumstats)
library(ggforce)
library(fitdistrplus)
heart <- robustbase::heart
library(Hmisc)
library(latex2exp)
label <- xtable::label
`label<-` <- xtable::`label<-`
src <- dplyr::src
summarize <- dplyr::summarize
library(MPDiR)
library(rsample)
library(roxygen2)
library(tidytuesdayR)
library(truncnorm)
library(vcd)
#continuous
library(pracma)
# poisson
# experiments
library(agricolae)
# models
library(qqplotr)
# lmm1
library(lme4)
library(broom.mixed)
library(merTools)
library(qqplotr)
# lmm2
library(effects)
library(foreach)
library(predictmeans)
pathMoodTab <- "./dta/chapter3table3.csv"
moodIndx <-
vroom(file = pathMoodTab, show_col_types = FALSE) %>%
mutate(
cond = as_factor(cond),
rating = rating
)
moodCart <- moodIndx %>%
mutate(row_number = rep(1:10, times = 3)) %>%
pivot_wider(names_from = cond,
values_from = rating) %>%
select(-row_number)
moodOverlays <- ANOVA_overlay(rating~cond, moodIndx)
moodOverlays
library(XML)
library(RSelenium)
library(rvest)
# From https://stackoverflow.com/a/70955724
remDr <- rsDriver(browser='chrome', port=4444L)
# From https://stackoverflow.com/a/70955724
remDr <- rsDriver(browser='firefox', port=4444L)
library(XML)
library(RSelenium)
library(rvest)
# From http://joshuamccrain.com/tutorials/web_scraping_R_selenium.html
# and https://stackoverflow.com/a/70955724
remDr <- rsDriver(browser='firefox', port=4444L)
brow <- remDr[["client"]]
brow$open()
url1 <- "https://www.google.com/search?rlz=1C1EJFC_enRU910RU910&tbs=lf:1,lf_ui:2&tbm=lcl&sxsrf=APwXEdeJTCs3HrYfm-CMqhvz4jVSVm5hEA:1688133850086&q=list+of+autism+centers+virginia&rflfq=1&num=10&rllag=38058152,-78483726,1609&sa=X&ved=2ahUKEwiYwt7TlOv_AhV0E1kFHSuDDhIQjGp6BAgZEAE&biw=1280&bih=569&dpr=1.5#rlfi=hd:;si:;mv:[[38.7900618,-75.7736827],[36.656414,-80.20948899999999]];tbs:lrf:!1m4!1u3!2m2!3m1!1e1!1m4!1u2!2m2!2m1!1e1!2m1!1e2!2m1!1e3!3sIAE,lf:1,lf_ui:2"
brow$navigate(url1)
h <- brow$getPageSource()
h <- read_html(h[[1]])
Name <- h%>%html_elements(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "OSrXXb", " " ))]') %>%html_text()
Name
url2 <- "https://autismdrive.virginia.edu/#/search?types=location&ages=adult&sort=Distance&pageStart=21&zoom=10&restrictToMap=n&lat=38.026342&lng=-78.5348&"
brow$navigate(url2)
h2 <- brow$getPageSource()
h2 <- read_html(h2[[1]])
Name2 <- h2 %>% html_elements("_ngcontent-bwe-c247") %>% html_attr("title mat-h2") %>%
html_text()
Name2 <- h2 %>% html_nodes(".mat-h2") %>% html_text()
Name2
#'
#' # Showing that the sums of the overlays add up to the data
#'
#' toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
#' SS_data <- sum((toothGrowthOverlays$data)^2)
#' SS_overlays <- sum((toothGrowthOverlays$common)^2) + sum((toothGrowthOverlays$condition)^2) +
#'  sum((toothGrowthOverlays$residuals)^2)
#' all.equal(SS_data,SS_overlays)
#'}
#' @export
ANOVA_overlay <- function(x, ...){
UseMethod('ANOVA_overlay')
}
#' @export
ANOVA_overlay.default <- function(x, y, data, common = mean){
data <- data[,c(y, x)]
data.w <- unstack(data, formula(paste0(y, "~", x)))
maxN_Group <- max(sapply(data.w, length))
data.w <- as.data.frame(sapply(data.w, function(x){
if(length(x) < maxN_Group){
return(c(x,rep(NA, maxN_Group-length(x))))
}
return(x)
}))
# Split the mood data into overlays
data.mn <- sapply(data.w, common, na.rm = TRUE)
# sweep:
dataResid <- sweep(data.w, MARGIN = 2, STATS = data.mn)
#taking a value, and subtracting it from
#all of the values in an overlay to get another overlay
# common
dataCommon <- common(data.mn, na.rm = TRUE)
# sweep common out condition means to get the effect of condition
data.eff <- data.mn - dataCommon
# turn into four overlays
# (1) data
data.w
# (2) common
dataCommonOverlay <- as.data.frame(matrix(dataCommon, nrow = nrow(data.w),
ncol = ncol(data.w)))
names(dataCommonOverlay) <- names(data.eff)
# (3) condition
dataOverlay <- as.data.frame(matrix(data.eff, nrow = nrow(data.w),
ncol = ncol(data.w),
byrow = TRUE))
names(dataOverlay) <- names(data.eff)
# (4) residuals
names(dataResid) <- names(data.eff)
# calculate df's
dfData <- nrow(data.w) - 1
dfCondition <- ncol(data.w) - 1
dfResiduals <- nrow(data.w) - ncol(data.w)
# calculate sums of squares
ssData <- sum((data.w)^2)
ssCondition <- sum((dataOverlay)^2)
ssResiduals <- sum((dataResid)^2)
# calculate mean squares
msCondition <- ssCondition/dfCondition
msResiduals <- ssCondition/dfCondition
# calculate test statistic
fStatistic <- msCondition/msResiduals
return(list("overlays" = list("data"=tibble::tibble(data.w),
"common"=tibble::tibble(dataCommonOverlay),
"condition"=tibble::tibble(dataOverlay),
"residuals"=tibble::tibble(dataResid)),
"df" = list("data" = dfData,
"condition" = dfCondition,
"residuals" = dfResiduals),
"SS" = list("data" = ssData,
"condition" = ssCondition,
"residuals" = ssResiduals),
"MS" = list("condition" = msCondition,
"residuals" = msResiduals),
"statistic" = fStatistic))
}
#' @export
ANOVA_overlay.formula <- function(x, data, common = mean){
dvFormula <- as.character(x[[2]])
ivFormula <- as.character(x[[3]])
ANOVA_overlay.default(ivFormula, dvFormula, data, common)
}
toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
toothGrowthOverlays$SS
anova(lm(len~supp, ToothGrowth))
toothGrowthOverlays$df
toothGrowthOverlays$ms
toothGrowthOverlays$MS
dim(ToothGrowth)
#' @export
ANOVA_overlay.default <- function(x, y, data, common = mean){
data <- data[,c(y, x)]
data.w <- unstack(data, formula(paste0(y, "~", x)))
maxN_Group <- max(sapply(data.w, length))
data.w <- as.data.frame(sapply(data.w, function(x){
if(length(x) < maxN_Group){
return(c(x,rep(NA, maxN_Group-length(x))))
}
return(x)
}))
# Split the mood data into overlays
data.mn <- sapply(data.w, common, na.rm = TRUE)
# sweep:
dataResid <- sweep(data.w, MARGIN = 2, STATS = data.mn)
#taking a value, and subtracting it from
#all of the values in an overlay to get another overlay
# common
dataCommon <- common(data.mn, na.rm = TRUE)
# sweep common out condition means to get the effect of condition
data.eff <- data.mn - dataCommon
# turn into four overlays
# (1) data
data.w
# (2) common
dataCommonOverlay <- as.data.frame(matrix(dataCommon, nrow = nrow(data.w),
ncol = ncol(data.w)))
names(dataCommonOverlay) <- names(data.eff)
# (3) condition
dataOverlay <- as.data.frame(matrix(data.eff, nrow = nrow(data.w),
ncol = ncol(data.w),
byrow = TRUE))
names(dataOverlay) <- names(data.eff)
# (4) residuals
names(dataResid) <- names(data.eff)
# calculate df's
dfData <- nrow(data) - 1
dfCondition <- ncol(data.w) - 1
dfResiduals <- nrow(data) - ncol(data.w)
# calculate sums of squares
ssData <- sum((data.w)^2)
ssCondition <- sum((dataOverlay)^2)
ssResiduals <- sum((dataResid)^2)
# calculate mean squares
msCondition <- ssCondition/dfCondition
msResiduals <- ssResiduals/dfResiduals
# calculate test statistic
fStatistic <- msCondition/msResiduals
return(list("overlays" = list("data"=tibble::tibble(data.w),
"common"=tibble::tibble(dataCommonOverlay),
"condition"=tibble::tibble(dataOverlay),
"residuals"=tibble::tibble(dataResid)),
"df" = list("data" = dfData,
"condition" = dfCondition,
"residuals" = dfResiduals),
"SS" = list("data" = ssData,
"condition" = ssCondition,
"residuals" = ssResiduals),
"MS" = list("condition" = msCondition,
"residuals" = msResiduals),
"statistic" = fStatistic))
}
ANOVA_overlay("supp", "len", ToothGrowth)
toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
anova(lm(len~supp, ToothGrowth))
str(anova(lm(len~supp, ToothGrowth)))
#'
#' # Showing that the sums of the overlays add up to the data
#'
#' toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
#' SS_data <- sum((toothGrowthOverlays$data)^2)
#' SS_overlays <- sum((toothGrowthOverlays$common)^2) + sum((toothGrowthOverlays$condition)^2) +
#'  sum((toothGrowthOverlays$residuals)^2)
#' all.equal(SS_data,SS_overlays)
#'}
#' @export
ANOVA_overlay <- function(x, ...){
UseMethod('ANOVA_overlay')
}
#' @export
#' @export
ANOVA_overlay.formula <- function(x, data, common = mean){
dvFormula <- as.character(x[[2]])
ivFormula <- as.character(x[[3]])
ANOVA_overlay.default(ivFormula, dvFormula, data, common)
}
toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
#' @export
ANOVA_overlay.default <- function(x, y, data, common = mean){
data <- data[,c(y, x)]
data.w <- unstack(data, formula(paste0(y, "~", x)))
maxN_Group <- max(sapply(data.w, length))
data.w <- as.data.frame(sapply(data.w, function(x){
if(length(x) < maxN_Group){
return(c(x,rep(NA, maxN_Group-length(x))))
}
return(x)
}))
# Split the mood data into overlays
data.mn <- sapply(data.w, common, na.rm = TRUE)
# sweep:
dataResid <- sweep(data.w, MARGIN = 2, STATS = data.mn)
#taking a value, and subtracting it from
#all of the values in an overlay to get another overlay
# common
dataCommon <- common(data.mn, na.rm = TRUE)
# sweep common out condition means to get the effect of condition
data.eff <- data.mn - dataCommon
# turn into four overlays
# (1) data
data.w
# (2) common
dataCommonOverlay <- as.data.frame(matrix(dataCommon, nrow = nrow(data.w),
ncol = ncol(data.w)))
names(dataCommonOverlay) <- names(data.eff)
# (3) condition
dataOverlay <- as.data.frame(matrix(data.eff, nrow = nrow(data.w),
ncol = ncol(data.w),
byrow = TRUE))
names(dataOverlay) <- names(data.eff)
# (4) residuals
names(dataResid) <- names(data.eff)
# calculate df's
dfCondition <- ncol(data.w) - 1
dfResiduals <- nrow(data) - ncol(data.w)
dfData <- nrow(data) - 1
# calculate sums of squares
ssCondition <- sum((dataOverlay)^2)
ssResiduals <- sum((dataResid)^2)
ssData <- sum((data.w)^2)
# calculate mean squares
msCondition <- ssCondition/dfCondition
msResiduals <- ssResiduals/dfResiduals
# calculate test statistic
fStatistic <- msCondition/msResiduals
# create source table
sourceTable <- tibble::tibble("Source" = c("Condition", "Residuals", "Data"),
"Df" = c(dfCondition, dfResiduals, dfData),
"Sum Sq" = c(ssCondition, ssResiduals, ssData),
"Mean Sq" = c(msCondition, msResiduals, NA),
"F Statistic" = c(fStatistic, NA, NA))
return(list("overlays" = list("data"=tibble::tibble(data.w),
"common"=tibble::tibble(dataCommonOverlay),
"condition"=tibble::tibble(dataOverlay),
"residuals"=tibble::tibble(dataResid)),
"sourceTable" = sourceTable)
}
#' @export
ANOVA_overlay.default <- function(x, y, data, common = mean){
data <- data[,c(y, x)]
data.w <- unstack(data, formula(paste0(y, "~", x)))
maxN_Group <- max(sapply(data.w, length))
data.w <- as.data.frame(sapply(data.w, function(x){
if(length(x) < maxN_Group){
return(c(x,rep(NA, maxN_Group-length(x))))
}
return(x)
}))
# Split the mood data into overlays
data.mn <- sapply(data.w, common, na.rm = TRUE)
# sweep:
dataResid <- sweep(data.w, MARGIN = 2, STATS = data.mn)
#taking a value, and subtracting it from
#all of the values in an overlay to get another overlay
# common
dataCommon <- common(data.mn, na.rm = TRUE)
# sweep common out condition means to get the effect of condition
data.eff <- data.mn - dataCommon
# turn into four overlays
# (1) data
data.w
# (2) common
dataCommonOverlay <- as.data.frame(matrix(dataCommon, nrow = nrow(data.w),
ncol = ncol(data.w)))
names(dataCommonOverlay) <- names(data.eff)
# (3) condition
dataOverlay <- as.data.frame(matrix(data.eff, nrow = nrow(data.w),
ncol = ncol(data.w),
byrow = TRUE))
names(dataOverlay) <- names(data.eff)
# (4) residuals
names(dataResid) <- names(data.eff)
# calculate df's
dfCondition <- ncol(data.w) - 1
dfResiduals <- nrow(data) - ncol(data.w)
dfData <- nrow(data) - 1
# calculate sums of squares
ssCondition <- sum((dataOverlay)^2)
ssResiduals <- sum((dataResid)^2)
ssData <- sum((data.w)^2)
# calculate mean squares
msCondition <- ssCondition/dfCondition
msResiduals <- ssResiduals/dfResiduals
# calculate test statistic
fStatistic <- msCondition/msResiduals
# create source table
sourceTable <- tibble::tibble("Source" = c("Condition", "Residuals", "Data"),
"Df" = c(dfCondition, dfResiduals, dfData),
"Sum Sq" = c(ssCondition, ssResiduals, ssData),
"Mean Sq" = c(msCondition, msResiduals, NA),
"F Statistic" = c(fStatistic, NA, NA))
return(list("overlays" = list("data"=tibble::tibble(data.w),
"common"=tibble::tibble(dataCommonOverlay),
"condition"=tibble::tibble(dataOverlay),
"residuals"=tibble::tibble(dataResid)),
"sourceTable" = sourceTable))
}
#' @export
ANOVA_overlay.formula <- function(x, data, common = mean){
dvFormula <- as.character(x[[2]])
ivFormula <- as.character(x[[3]])
ANOVA_overlay.default(ivFormula, dvFormula, data, common)
}
toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
toothGrowthOverlays$sourceTable
roxygen2::roxygenise()
rm(list = c("ANOVA_overlay"))
roxygen2::roxygenise()
install.packages("DARE")
install.packages("DARE")
remotes::install_github("DARE")
remotes::install_github("mjmeyer111/DARE")
library(DARE)
toothGrowthOverlays <- ANOVA_overlay("supp", "len", ToothGrowth)
toothGrowthOverlays
